#!/bin/bash

# Script de Deploy Completo para Produ√ß√£o
# Uso: ./deploy.sh [--ssl] [--email seu-email@exemplo.com]

set -e

# Configura√ß√µes padr√£o
DOMAIN="unitinscti.com.br"
EMAIL="admin@unitinscti.com.br"
SETUP_SSL=false

# Parse dos argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --ssl)
            SETUP_SSL=true
            shift
            ;;
        --email)
            EMAIL="$2"
            shift 2
            ;;
        *)
            echo "Uso: $0 [--ssl] [--email seu-email@exemplo.com]"
            exit 1
            ;;
    esac
done

echo "üöÄ Iniciando deploy da aplica√ß√£o..."
echo "üìß Email: $EMAIL"
echo "üåê Dom√≠nio: $DOMAIN"
echo "üîê SSL: $SETUP_SSL"

# Verifica se o Docker est√° instalado e rodando
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Instale o Docker primeiro."
    exit 1
fi

if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
    exit 1
fi

# Para containers existentes
echo "üõë Parando containers existentes..."
docker-compose down 2>/dev/null || true
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

# Remove imagens antigas para for√ßar rebuild
echo "üßπ Limpando imagens antigas..."
docker image prune -f

# Build da aplica√ß√£o
echo "üî® Fazendo build da aplica√ß√£o..."
docker-compose -f docker-compose.prod.yml build --no-cache

# Cria arquivo .env.production se n√£o existir
if [ ! -f .env.production ]; then
    echo "üìù Criando arquivo .env.production..."
    cp .env.production.example .env.production
    echo "‚ö†Ô∏è  Lembre-se de configurar as vari√°veis em .env.production"
fi

if [ "$SETUP_SSL" = true ]; then
    echo "üîê Configurando SSL..."
    
    # Cria diret√≥rios para certificados
    mkdir -p ./certbot/conf
    mkdir -p ./certbot/www
    
    # Inicia apenas o Nginx para o challenge do Let's Encrypt
    echo "üîß Iniciando Nginx tempor√°rio..."
    docker-compose -f docker-compose.prod.yml up -d nginx
    
    # Aguarda inicializa√ß√£o
    sleep 15
    
    # Testa se o Nginx est√° respondendo
    if ! curl -f http://localhost/health > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Nginx n√£o est√° respondendo, tentando novamente..."
        sleep 10
    fi
    
    # Obt√©m certificados SSL
    echo "üîê Obtendo certificados SSL..."
    docker-compose -f docker-compose.prod.yml run --rm certbot certonly \
        --webroot \
        --webroot-path=/var/www/certbot \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        --non-interactive \
        -d $DOMAIN \
        -d www.$DOMAIN
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Certificados SSL obtidos com sucesso!"
        
        # Para o Nginx tempor√°rio
        docker-compose -f docker-compose.prod.yml down
        
        # Inicia aplica√ß√£o completa com SSL
        echo "üöÄ Iniciando aplica√ß√£o com SSL..."
        docker-compose -f docker-compose.prod.yml up -d
        
        # Configura renova√ß√£o autom√°tica
        echo "‚öôÔ∏è  Configurando renova√ß√£o autom√°tica..."
        (crontab -l 2>/dev/null | grep -v "certbot renew"; echo "0 12 * * * cd $(pwd) && docker-compose -f docker-compose.prod.yml run --rm certbot renew --quiet && docker-compose -f docker-compose.prod.yml restart nginx") | crontab -
        
    else
        echo "‚ùå Erro ao obter certificados SSL"
        echo "üîÑ Iniciando sem SSL..."
        docker-compose -f docker-compose.prod.yml down
        docker-compose -f docker-compose.prod.yml up -d
    fi
else
    echo "üöÄ Iniciando aplica√ß√£o sem SSL..."
    docker-compose -f docker-compose.prod.yml up -d
fi

# Aguarda a aplica√ß√£o inicializar
echo "‚è≥ Aguardando aplica√ß√£o inicializar..."
sleep 30

# Verifica se a aplica√ß√£o est√° rodando
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    echo "‚úÖ Deploy conclu√≠do com sucesso!"
    echo ""
    echo "üåê Aplica√ß√£o dispon√≠vel em:"
    if [ "$SETUP_SSL" = true ]; then
        echo "   - https://$DOMAIN"
        echo "   - https://www.$DOMAIN"
    else
        echo "   - http://$DOMAIN"
        echo "   - http://www.$DOMAIN"
    fi
    echo ""
    echo "üìä Status dos containers:"
    docker-compose -f docker-compose.prod.yml ps
    echo ""
    echo "üìù Para ver os logs:"
    echo "   docker-compose -f docker-compose.prod.yml logs -f"
    echo ""
    echo "üîÑ Para reiniciar:"
    echo "   docker-compose -f docker-compose.prod.yml restart"
else
    echo "‚ùå Erro no deploy. Verificando logs..."
    docker-compose -f docker-compose.prod.yml logs
    exit 1
fi